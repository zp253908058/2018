<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.teeny.wms.web.repository.InventoryMapper">

    <select id="getInventoryList" resultType="InventoryGoodsEntity">
        SELECT
        d.smb_id                               AS id,
        d.original_id                          AS originalId,
        d.bill_id                              AS billId,
        d.p_id                                 AS goodsId,
        p.name                                 AS goodsName,
        l.loc_code                             AS location,
        d.EligibleQty                          AS countInBill,
        d.pdQty                                AS inventoryCount,
        p.unit1Name                            AS unit,
        p.standard                             AS specification,
        c.name                                 AS manufacturer,
        d.DealStates                           AS status,
        l.loc_code                             AS locationCode,
        p.barcode                              AS goodsCode,
        d.Batchno                              AS lotNo,
        CONVERT(VARCHAR(100), d.Validdate, 23) AS validateDate,
        CONVERT(VARCHAR(100), d.MakeDate, 23)  AS productionDate,
        isnull(sa.name, '')                    AS repositoryName,
        isnull(a.name, '')                     AS areaName,
        p.pinyin                               AS pinyin
        FROM ${account}.dbo.pda_pdBill_D d
        LEFT JOIN ${account}.dbo.pda_Products p ON d.p_id = p.p_id
        LEFT JOIN ${account}.dbo.pda_clients c ON c.c_id = d.Supplier_id
        LEFT JOIN ${account}.dbo.pda_location l ON l.l_id = d.Location_id
        LEFT JOIN ${account}.dbo.pda_stockArea sa ON sa.sa_id = l.sa_id
        LEFT JOIN ${account}.dbo.pda_Area a ON a.sc_id = l.sc_id
        WHERE
        d.bill_id = #{id}
        <if test="isMerge">
            AND d.smb_id = (SELECT min(smb_id) AS id FROM ${account}.dbo.pda_pdBill_D WHERE d.original_id = original_id)
        </if>
        ORDER BY l.l_id
    </select>

    <update id="single">
        UPDATE ${account}.dbo.pda_pdBill_D
        SET DealStates = 1, pdQty = EligibleQty, wctime = getdate(), loginid = #{userId}
        WHERE original_id = #{originalId}
    </update>

    <select id="getBillId" resultType="int">
        SELECT TOP 1 d.bill_id FROM ${account}.dbo.pda_pdBill_D d WHERE d.original_id = #{originalId}
    </select>

    <update id="updateState" flushCache="true">
        <selectKey keyProperty="count" resultType="int" order="BEFORE">
            SELECT count(*) AS count
            FROM ${account}.dbo.pda_pdBill_D d
            WHERE d.DealStates = 0 AND d.bill_id = #{id}
        </selectKey>

        <if test="count==0">
            UPDATE ${account}.dbo.pda_pdBill SET pdastates = 2 WHERE billid = #{id}
        </if>
    </update>

    <update id="complete">
        UPDATE ${account}.dbo.pda_pdBill_D
        SET DealStates = 1, pdQty = EligibleQty, wctime = getdate(), loginid = #{userId}
        WHERE original_id IN
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>


    <resultMap id="keyValue" type="keyValue">
        <id column="id" property="key" javaType="int"/>
        <result column="name" property="value"/>
    </resultMap>

    <select id="getPdType" resultMap="keyValue">
        SELECT
        b.billid AS id,
        b.pdname AS name
        FROM ${account}.dbo.pda_pdBill b
        WHERE b.billstates = #{type} AND b.pdastates &lt; 2
        <if test="sId != 0">
            AND b.s_id = #{sId}
        </if>
    </select>

    <insert id="singleComplete" flushCache="true">
        INSERT INTO ${account}.dbo.pda_pdBill_D
        (bill_id,
        p_id,
        MakeDate,
        EligibleQty,
        S_id,
        Location_id,
        Supplier_id,
        InstoreTime,
        billstates,
        Validdate,
        Batchno,
        pdQty,
        DealStates,
        pdastates,
        original_id,
        wctime,
        loginid)
        <foreach collection="list" item="item" index="index" separator="union all" open="(" close=")">
            (SELECT
            d.bill_id,
            d.p_id,
            d.MakeDate,
            d.EligibleQty,
            d.S_id,
            d.Location_id,
            d.Supplier_id,
            d.InstoreTime,
            d.billstates,
            #{item.validateDate,jdbcType=VARCHAR},
            #{item.lotNo,jdbcType=VARCHAR},
            #{item.count,jdbcType=REAL},
            1,
            d.pdastates,
            d.original_id,
            getdate(),
            #{userId,jdbcType=INTEGER}
            FROM ${account}.dbo.pda_pdBill_D d
            WHERE d.smb_id = (SELECT max(d1.smb_id)
            FROM ${account}.dbo.pda_pdBill_D d1
            WHERE d1.original_id = #{id}))
        </foreach>
    </insert>

    <delete id="deleteByIds" flushCache="true">
        DELETE FROM ${account}.dbo.pda_pdBill_D WHERE smb_id IN
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <update id="updateBillStatus">
        <selectKey keyProperty="count" resultType="int" order="BEFORE">
            SELECT count(*) AS count
            FROM ${account}.dbo.pda_pdBill_D d
            WHERE d.DealStates = 0 AND d.bill_id = (SELECT DISTINCT d1.bill_id
            FROM ${account}.dbo.pda_pdBill_D d1
            WHERE d1.original_id = #{id})
        </selectKey>

        <if test="count==0">
            UPDATE ${account}.dbo.pda_pdBill
            SET pdastates = 2
            WHERE billid = (SELECT DISTINCT d.bill_id
            FROM ${account}.dbo.pda_pdBill_D d
            WHERE d.original_id = #{id})
        </if>
    </update>

    <insert id="addInventory">
        INSERT INTO ${account}.dbo.pda_pdBill_D
        (bill_id,
         p_id,
         Validdate,
         Batchno,
         EligibleQty,
         pdQty,
         S_id,
         Location_id,
         Supplier_id,
         InstoreTime,
         billstates,
         DealStates,
         pdastates,
         wctime,
         loginid)
            SELECT
                #{item.inventoryId,jdbcType=INTEGER},
                #{item.goodsId,jdbcType=INTEGER},
                #{item.validateDate,jdbcType=VARCHAR},
                #{item.lotNo,jdbcType=VARCHAR},
                #{item.amount,jdbcType=INTEGER},
                #{item.amount,jdbcType=INTEGER},
                #{sId,jdbcType=INTEGER},
                #{item.locationId,jdbcType=INTEGER},
                p.Supplier_id,
                getdate(),
                #{item.billState,jdbcType=INTEGER},
                1,
                0,
                getdate(),
                #{userId,jdbcType=INTEGER}
            FROM ${account}.dbo.pda_Products p
            WHERE p.p_id = #{item.goodsId}
    </insert>

    <select id="getSKUList" resultType="SKUEntity">
        SELECT
        s.storehouse_id                        AS id,
        s.p_id                                 AS goodsId,
        s.Pname                                AS goodsName,
        s.Code                                 AS number,
        s.Locname                              AS locationName,
        s.location_id                          AS locationId,
        s.batchno                              AS lotNo,
        s.factory                              AS manufacturer,
        s.quantity,
        CONVERT(VARCHAR(100), s.validdate, 23) AS validateDate,
        CONVERT(VARCHAR(100), s.makedate, 23)  AS productDate,
        s.Standard                             AS specification,
        s.Name1                                AS unit,
        s.costprice                            AS costPrice,
        s.costtotal                            AS costTotal,
        s.Makearea                             AS productionPlace
        FROM ${account}.dbo.VW_PDA_Storehouse s
        LEFT JOIN ${account}.dbo.pda_location l ON l.l_id = s.location_id
        INNER JOIN ${account}.dbo.pda_Products p ON p.p_id = s.p_id
        <where>
            <if test="location != null and location != ''">
                l.loc_code = #{location}
            </if>
            <if test="barcode != null and barcode != ''">
                AND (p.barcode = #{barcode} OR p.pinyin LIKE '%' + #{barcode} + '%' OR p.name LIKE '%' + #{barcode} + '%')
            </if>
        </where>
    </select>

    <insert id="addProduct">
        INSERT INTO ${account}.dbo.pda_kcpdBill_D (
            storehouse_id,
            p_id,
            Batchno,
            Location_id,
            quantity,
            pdqty,
            Validdate,
            ss_id,
            DealStates,
            pdastates,
            wctime,
            loginid)
        VALUES (
            #{item.id,jdbcType=INTEGER},
            #{item.pId,jdbcType=INTEGER},
            #{item.lotNo,jdbcType=VARCHAR},
            #{item.locationId,jdbcType=INTEGER},
            #{item.amount,jdbcType=REAL},
            #{item.originalAmount,jdbcType=REAL},
            #{item.validateDate,jdbcType=VARCHAR},
            #{sId,jdbcType=INTEGER},
            1,
            0,
            getdate(),
            #{userId,jdbcType=INTEGER}
        )
    </insert>

    <resultMap id="repositoryList" type="RepositoryEntity">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <collection property="areas" javaType="ArrayList" ofType="AreaEntity"
                    column="{account = account, repositoryId = id}"
                    select="com.teeny.wms.web.repository.InventoryMapper.getAreaList"/>
    </resultMap>

    <select id="getCollection" resultMap="repositoryList">
        SELECT DISTINCT
            sa.sa_id            AS id,
            isnull(sa.name, '') AS name,
            #{account}          AS account
        FROM ${account}.dbo.pda_pdBill_D d
            LEFT JOIN ${account}.dbo.pda_location l ON l.l_id = d.Location_id
            LEFT JOIN ${account}.dbo.pda_stockArea sa ON sa.sa_id = l.sa_id
        WHERE d.bill_id = #{id} AND sa.sa_id > 0
        ORDER BY name
    </select>

    <select id="getAreaList" resultType="AreaEntity">
        SELECT DISTINCT
            a.sc_id            AS id,
            isnull(a.name, '') AS name
        FROM ${account}.dbo.pda_Area a
        WHERE a.sa_id = #{repositoryId} AND a.sc_id > 0
        ORDER BY name
    </select>

    <select id="count" resultType="InventoryCountEntity">
        SELECT
        sum(CASE DealStates WHEN 0 THEN 1 ELSE 0 END) AS unfinishedNumber,
        sum(CASE DealStates WHEN 1 THEN 1 ELSE 0 END) AS finishedNumber
        FROM ${account}.dbo.pda_pdBill_D d
        LEFT JOIN ${account}.dbo.pda_location l ON l.l_id = d.Location_id
        WHERE d.bill_id = #{id}
        <if test="repositoryId > 0">
            AND l.sa_id = #{repositoryId}
        </if>
        <if test="areaId > 0">
            AND l.sc_id = #{areaId}
        </if>
        <if test="barcode != null and barcode != ''">
            AND l.loc_code = #{barcode}
        </if>
        <if test="isMerge">
            AND d.smb_id = (SELECT min(smb_id) AS id FROM ${account}.dbo.pda_pdBill_D WHERE d.original_id = original_id)
        </if>
    </select>

    <select id="getList" resultType="InventoryGoodsEntity">
        SELECT
        d.smb_id                               AS id,
        d.original_id                          AS originalId,
        d.bill_id                              AS billId,
        d.p_id                                 AS goodsId,
        p.name                                 AS goodsName,
        l.loc_code                             AS location,
        d.EligibleQty                          AS countInBill,
        d.pdQty                                AS inventoryCount,
        p.unit1Name                            AS unit,
        p.standard                             AS specification,
        p.Factory                              AS manufacturer,
        d.DealStates                           AS status,
        l.loc_code                             AS locationCode,
        p.barcode                              AS goodsCode,
        d.Batchno                              AS lotNo,
        CONVERT(VARCHAR(100), d.Validdate, 23) AS validateDate,
        CONVERT(VARCHAR(100), d.MakeDate, 23)  AS productionDate,
        p.pinyin                               AS pinyin
        FROM ${account}.dbo.pda_pdBill_D d
        LEFT JOIN ${account}.dbo.pda_Products p ON d.p_id = p.p_id
        LEFT JOIN ${account}.dbo.pda_location l ON l.l_id = d.Location_id
        WHERE d.bill_id = #{id} AND l.loc_code = #{locationCode}
        <if test="repositoryId > 0">
            AND l.sa_id = #{repositoryId}
        </if>
        <if test="areaId > 0">
            AND l.sc_id = #{areaId}
        </if>
        <if test="isMerge">
            AND d.smb_id = (SELECT min(smb_id) AS id FROM ${account}.dbo.pda_pdBill_D WHERE d.original_id = original_id)
        </if>
        ORDER BY l.l_id
    </select>
</mapper>